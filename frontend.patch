Index: src/addons/stock/controllers/watcher.js
===================================================================
--- src/addons/stock/controllers/watcher.js	(revision 2200)
+++ src/addons/stock/controllers/watcher.js	(working copy)
@@ -16,29 +16,13 @@
   yield takeLeading(Action.UPDATE_STOCK, workerUpdateStock);
 }
 
-// Call to createStockAndLocation - StockWarehouse model - backend
-function generatorCreateStockRecord(data) {
-    const { ref_model, payload } = data;
-    return axios({
-        method: "POST",
-        url: `/core/model/func/${ref_model}/createStockAndLocation`,
-        headers: {
-        Authorization: `Tomaho ${Cookies.get("token")}`,
-        },
-        data: {
-        payload: payload,
-        },
-    });
-}
-
 function* workerCreateStock(action) {
   try {
     yield put({ type: ActionBaseType.SET_LOADING });
-    let response = yield call(generatorCreateStockRecord, { // (**before: generatorCreateRecord) call to backend with model & payload 
+    let response = yield call(generatorCreateRecord, { //  call to backend with model & payload 
       ref_model: "StockWarehouse",
       payload: { documents: [action.payload.documents] },// action.payload.documents is all fields inputted
     });
-    console.log(response)
     if (response && response.data && response.data.insertedIds) { // if success, then put update state
       let activeRecordID = response.data.insertedIds[0];
       yield put({ type: ActionBaseType.UPDATE_ACTIVE_VIEW_ID, activeRecordID });
Index: src/addons/stock/controllers/watcherLocation.js
===================================================================
--- src/addons/stock/controllers/watcherLocation.js	(revision 2200)
+++ src/addons/stock/controllers/watcherLocation.js	(working copy)
@@ -1,114 +1,137 @@
-import * as Action from './actionTypes';
-import * as ActionBaseType from '../../base/controllers/actionTypes';
-import {generatorFetchRecord, generatorCreateRecord, generatorUpdateRecord} from '../../base/controllers/generator';
-import { put, call, take, takeLeading } from 'redux-saga/effects';
+import * as Action from "./actionTypes";
+import * as ActionBaseType from "../../base/controllers/actionTypes";
+import {
+  generatorFetchRecord,
+  generatorCreateRecord,
+  generatorUpdateRecord,
+} from "../../base/controllers/generator";
+import { put, call, take, takeLeading } from "redux-saga/effects";
+import axios from "axios";
+import Cookies from "js-cookie";
 
-
 export function* watcherLocation() {
-    yield takeLeading(Action.CREATE_LOCATION, workerCreateLocation);
-    yield takeLeading(Action.FETCH_LOCATION, workerFetchLocation);
-    yield takeLeading(Action.UPDATE_LOCATION, workerUpdateLocation);
+  yield takeLeading(Action.CREATE_LOCATION, workerCreateLocation);
+  yield takeLeading(Action.FETCH_LOCATION, workerFetchLocation);
+  yield takeLeading(Action.UPDATE_LOCATION, workerUpdateLocation);
 }
 
 function* workerCreateLocation(action) {
-    try {
-        yield put({type: ActionBaseType.SET_LOADING});
-        let response = yield call(generatorCreateRecord, {ref_model: 'Location', payload: { documents: [action.payload.documents] }});
-        if (response && response.data && response.data.insertedIds) {
-            let activeRecordID = response.data.insertedIds[0];
-            yield put({ type: ActionBaseType.UPDATE_ACTIVE_VIEW_ID, activeRecordID });
-            yield take(ActionBaseType.UPDATE_ACTIVE_VIEW_ID_SUCCESS);
+  try {
+    yield put({ type: ActionBaseType.SET_LOADING }); 
+    let response = yield call(generatorCreateRecord, {
+      ref_model: "Location",
+      payload: { documents: [action.payload.documents] },
+    });
+    if (response && response.data && response.data.insertedIds) {
+      let activeRecordID = response.data.insertedIds[0];
+      yield put({ type: ActionBaseType.UPDATE_ACTIVE_VIEW_ID, activeRecordID });
+      yield take(ActionBaseType.UPDATE_ACTIVE_VIEW_ID_SUCCESS);
 
-            yield put({ type: ActionBaseType.UPDATE_ACTIVE_VIEW_MODE, activeViewMode: 'read' });
-            yield take(ActionBaseType.UPDATE_ACTIVE_VIEW_MODE_SUCCESS);
+      yield put({
+        type: ActionBaseType.UPDATE_ACTIVE_VIEW_MODE,
+        activeViewMode: "read",
+      });
+      yield take(ActionBaseType.UPDATE_ACTIVE_VIEW_MODE_SUCCESS);
 
-            let payload = {
-                domain: [['_id', '=', activeRecordID]],
-                projection: action.payload.projection
-            }
+      let payload = {
+        domain: [["_id", "=", activeRecordID]],
+        projection: action.payload.projection,
+      };
 
-            yield put({ type: Action.FETCH_LOCATION, payload: payload, ttype: 'form' });
-            yield put({type: ActionBaseType.UNSET_LOADING});
-        }
-        else {
-            yield put({type: ActionBaseType.UNSET_LOADING});
-            yield put({
-                type: ActionBaseType.RAISE_WARNING,
-                errorPattern: 'workerCreateLocation',
-                errorStatus: response.data.status,
-                errorMessage: response.data.message
-            });
-        }
+      yield put({
+        type: Action.FETCH_LOCATION,
+        payload: payload,
+        ttype: "form",
+      });
+      yield put({ type: ActionBaseType.UNSET_LOADING });
+    } else {
+      yield put({ type: ActionBaseType.UNSET_LOADING });
+      yield put({
+        type: ActionBaseType.RAISE_WARNING,
+        errorPattern: "workerCreateLocation",
+        errorStatus: response.data.status,
+        errorMessage: response.data.message,
+      });
     }
-    catch (error) {
-        yield put({type: ActionBaseType.UNSET_LOADING});
-        yield put({
-            type: ActionBaseType.RAISE_WARNING,
-            errorPattern: 'workerCreateLocation',
-            errorStatus: error,
-            errorMessage: error
-        });
-    }
+  } catch (error) {
+    yield put({ type: ActionBaseType.UNSET_LOADING });
+    yield put({
+      type: ActionBaseType.RAISE_WARNING,
+      errorPattern: "workerCreateLocation",
+      errorStatus: error,
+      errorMessage: error,
+    });
+  }
 }
 
 function* workerFetchLocation(action) {
-    try {
-        yield put({type: ActionBaseType.SET_LOADING});
-        let response = yield call(generatorFetchRecord, { ref_model: 'Location', payload: action.payload});
-        if (response.data.status || response.data.message) {
-            yield put({type: ActionBaseType.UNSET_LOADING});
-            yield put({
-                type: ActionBaseType.RAISE_WARNING,
-                errorPattern: 'workerFetchLocation',
-                errorStatus: response.data.status,
-                errorMessage: response.data.message
-            });
-        }
-        else {
-            yield put({ type: Action.FETCH_LOCATION_SUCCESS, Location: response.data , ttype: action.ttype || 'list'});
-            yield put({type: ActionBaseType.UNSET_LOADING});
-        }
+  try {
+    yield put({ type: ActionBaseType.SET_LOADING });
+    let response = yield call(generatorFetchRecord, {
+      ref_model: "Location",
+      payload: action.payload,
+    });
+    if (response.data.status || response.data.message) {
+      yield put({ type: ActionBaseType.UNSET_LOADING });
+      yield put({
+        type: ActionBaseType.RAISE_WARNING,
+        errorPattern: "workerFetchLocation",
+        errorStatus: response.data.status,
+        errorMessage: response.data.message,
+      });
+    } else {
+      yield put({
+        type: Action.FETCH_LOCATION_SUCCESS,
+        Location: response.data,
+        ttype: action.ttype || "list",
+      });
+      yield put({ type: ActionBaseType.UNSET_LOADING });
     }
-    catch (error) {
-        yield put({type: ActionBaseType.UNSET_LOADING});
-        yield put({
-            type: ActionBaseType.RAISE_WARNING,
-            errorPattern: 'workerFetchLocation',
-            errorStatus: 501,
-            errorMessage: error
-        });
-    }
+  } catch (error) {
+    yield put({ type: ActionBaseType.UNSET_LOADING });
+    yield put({
+      type: ActionBaseType.RAISE_WARNING,
+      errorPattern: "workerFetchLocation",
+      errorStatus: 501,
+      errorMessage: error,
+    });
+  }
 }
 
 function* workerUpdateLocation(action) {
-    try {
-        yield put({type: ActionBaseType.SET_LOADING});
-        //Chỉ update Location khi form có data
-        if (Object.keys(action.payload.data).length > 0) {
-            yield call(generatorUpdateRecord, {ref_model: 'LocationWarehouse', payload: action.payload})
-        } 
+  try {
+    yield put({ type: ActionBaseType.SET_LOADING });
+    //Chỉ update Location khi form có data
+    if (Object.keys(action.payload.data).length > 0) {
+      yield call(generatorUpdateRecord, {
+        ref_model: "Location",
+        payload: action.payload,
+      });
+    }
 
-        //Chuyển View mode
-        yield put({ type: ActionBaseType.UPDATE_ACTIVE_VIEW_MODE, activeViewMode: 'read' })
-        yield take(ActionBaseType.UPDATE_ACTIVE_VIEW_MODE_SUCCESS);
+    //Chuyển View mode
+    yield put({
+      type: ActionBaseType.UPDATE_ACTIVE_VIEW_MODE,
+      activeViewMode: "read",
+    });
+    yield take(ActionBaseType.UPDATE_ACTIVE_VIEW_MODE_SUCCESS);
 
-        //Fetch lại data trong form
-        let activeID = action.payload.data._id;
-        let payload = {
-            domain: [['_id', '=', activeID]],
-            projection: action.payload.projection
-        }
-       
-        yield put({ type: Action.FETCH_LOCATION, payload: payload, ttype: 'form' });
-        yield put({type: ActionBaseType.UNSET_LOADING});
-    }
-    catch (error) {
-        yield put({type: ActionBaseType.UNSET_LOADING});
-        yield put({
-            type: ActionBaseType.RAISE_WARNING,
-            errorPattern: 'workerUpdateLocation',
-            errorStatus: 501,
-            errorMessage: error
-        });
-    }
-}
\ No newline at end of file
+    //Fetch lại data trong form
+    let activeID = action.payload.data._id;
+    let payload = {
+      domain: [["_id", "=", activeID]],
+      projection: action.payload.projection,
+    };
+
+    yield put({ type: Action.FETCH_LOCATION, payload: payload, ttype: "form" });
+    yield put({ type: ActionBaseType.UNSET_LOADING });
+  } catch (error) {
+    yield put({ type: ActionBaseType.UNSET_LOADING });
+    yield put({
+      type: ActionBaseType.RAISE_WARNING,
+      errorPattern: "workerUpdateLocation",
+      errorStatus: 501,
+      errorMessage: error,
+    });
+  }
+}
