Index: addons/stock/models/location.js
===================================================================
--- addons/stock/models/location.js	(revision 2200)
+++ addons/stock/models/location.js	(working copy)
@@ -1,56 +1,114 @@
 const BaseModel = require("../../base").BaseModel;
+const _ = require("lodash");
 // const logger = require('../../../utils').Logger;
+// var stockModel = null;
+// process.nextTick(() => (stockModel = require("./stock_warehouse")));
 
 class Location extends BaseModel {
-    constructor(connection) {
-        super(connection);
-        this.name = "Location";
-        this.label = "Địa điểm";
-        this.fields = {
-            name: { require: true,type: "string", string: "name" },
-            display_name: { require: true,type: 'string', string: 'display_name' },
-            location_id: {
-                type: "many2one",
-                refModel: "Location",
-                string: "location_id",
-            },
-            usage: {  type: "string", string: "usage" },
-            partner_id: {
-                type: "many2one",
-                refModel: "Partner",
-                string: "partner_id",
-            },
-            stock_warehouse_id: {  type: 'many2one', refModel: 'StockWarehouse' , string:'stock_warehouse_id'},
-            company_id: {
-                noUpdate: true,
-                type: "many2one",
-                refModel: "ResCompany",
-                string: "company_id",
-            },
-            scrap_location: { type: "boolean", string: "scrap_location" },
-            return_location: { type: "boolean", string: "return_location" },
-            // posx: { type: "number", string: "posx" },
-            // posy: { type: "number", string: "posy" },
-            // posz: { type: "number", string: "posz" },
-            // barcode: { type: "string", string: "barcode" },
-            comment: { type: "string", string: "comment" },
-            create_date: { type: "date", string: "create_date" },
-            create_uid: {
-                type: "many2one",
-                refModel: "ResUser",
-                string: "create_uid",
-            },
-            write_date: { type: "date", string: "write_date" },
-            write_uid: { type: "many2one", refModel: "ResUser", string: "write_uid" },
+  constructor(connection) {
+    super(connection);
+    this.name = "Location";
+    this.label = "Địa điểm";
+    this.fields = {
+      name: {
+        type: "string",
+        string: "name",
+      },
+      display_name: {
+        require: true,
+        type: "string",
+        string: "display_name",
+      },
+      location_id: {
+        type: "many2one",
+        refModel: "Location",
+        string: "location_id",
+      },
+      usage: {
+        type: "string",
+        string: "usage",
+      },
+      partner_id: {
+        type: "many2one",
+        refModel: "Partner",
+        string: "partner_id",
+      },
+      stock_warehouse_id: {
+        type: "many2one",
+        refModel: "StockWarehouse",
+        string: "stock_warehouse_id",
+      },
+      company_id: {
+        noUpdate: true,
+        type: "many2one",
+        refModel: "ResCompany",
+        string: "company_id",
+      },
+      scrap_location: {
+        type: "boolean",
+        string: "scrap_location",
+      },
+      return_location: {
+        type: "boolean",
+        string: "return_location",
+      },
+      // posx: { type: "number", string: "posx" },
+      // posy: { type: "number", string: "posy" },
+      // posz: { type: "number", string: "posz" },
+      // barcode: { type: "string", string: "barcode" },
+      comment: {
+        type: "string",
+        string: "comment",
+      },
+      create_date: {
+        type: "date",
+        string: "create_date",
+      },
+      create_uid: {
+        type: "many2one",
+        refModel: "ResUser",
+        string: "create_uid",
+      },
+      write_date: {
+        type: "date",
+        string: "write_date",
+      },
+      write_uid: {
+        type: "many2one",
+        refModel: "ResUser",
+        string: "write_uid",
+      },
+    };
+    this._init(this.fields);
+    this.allowFunc = ["search", "update", "create", "delete"];
+    this.permission_create = "GROUP_KETOANVIEN";
+    this.permission_read = "GROUP_KETOANVIEN";
+    this.permission_update = "GROUP_KETOANVIEN";
+    this.permission_delete = "GROUP_KETOANVIEN";
+  }
+
+  // ============================= createLocation ==============================
+  _preCreate(payload = {}, permission = {}) {
+    let newLocationPayload = _.cloneDeep(payload);
+    return this.search({
+      username: payload.username,
+      domain: [
+        ["location_id", "=", payload.documents[0].location_id]
+      ],
+      projection: ["name"],
+    }).then((res) => {
+      if (res.hasOwnProperty("status") && res.hasOwnProperty("message")) {
+        return { // or throw?
+          status: res.status,
+          message: `location - _preCreate: ${res.message}`,
         };
-        this._init(this.fields);
-        this.allowFunc = ["search", "update", "create", "delete"];
-        this.permission_create = "GROUP_KETOANVIEN";
-        this.permission_read = "GROUP_KETOANVIEN";
-        this.permission_update = "GROUP_KETOANVIEN";
-        this.permission_delete = "GROUP_KETOANVIEN";
-    }
-
+      } else {
+        newLocationPayload.documents[0].name = `${res[0].name}/${payload.documents[0].display_name}`;
+        return super._preCreate(newLocationPayload, permission);
+      }
+    });
+  }
+  // ============================= endCreateLocation ==============================
 }
 
-module.exports = new Location();
+module.exports = new Location();
\ No newline at end of file
Index: addons/stock/models/stock_warehouse.js
===================================================================
--- addons/stock/models/stock_warehouse.js	(revision 2200)
+++ addons/stock/models/stock_warehouse.js	(working copy)
@@ -1,86 +1,138 @@
-const BaseModel = require('../../base').BaseModel;
+const BaseModel = require("../../base").BaseModel;
 // const logger = require('../../../utils').Logger;
 var locationModel = null;
 process.nextTick(() => (locationModel = require("./location")));
-const _ = require('lodash');
+const _ = require("lodash");
 
 class StockWarehouse extends BaseModel {
   constructor(connection) {
     super(connection);
-    this.name = 'StockWarehouse';
-    this.label = 'Kho hàng';
+    this.name = "StockWarehouse";
+    this.label = "Kho hàng";
     this.fields = {
-      name: { require: true, type: 'string', string: 'name' },
-      display_name: { type: 'string', string: 'display_name' },
-      code: { require: true, type: 'string', string: 'code' },
-      address: { type: 'string', type: 'address' },
-      location_id: { type: 'many2one', refModel: 'Location', string: 'location_id' },
-      company_id: { noUpdate: true, type: 'many2one', refModel: 'ResCompany', string: 'company_id' },
-      create_date: { type: 'date', string: 'create_date' },
-      create_uid: { type: 'many2one', refModel: 'ResUser', string: 'create_uid' },
-      write_date: { type: 'date', string: 'write_date' },
-      write_uid: { type: 'many2one', refModel: 'ResUser', string: 'write_uid' },
-
+      name: {
+        require: true,
+        type: "string",
+        string: "name"
+      },
+      display_name: {
+        type: "string",
+        string: "display_name"
+      },
+      code: {
+        require: true,
+        type: "string",
+        string: "code"
+      },
+      address: {
+        type: "string",
+        type: "address"
+      },
+      location_id: {
+        type: "many2one",
+        refModel: "Location",
+        string: "location_id",
+      },
+      company_id: {
+        noUpdate: true,
+        type: "many2one",
+        refModel: "ResCompany",
+        string: "company_id",
+      },
+      create_date: {
+        type: "date",
+        string: "create_date"
+      },
+      create_uid: {
+        type: "many2one",
+        refModel: "ResUser",
+        string: "create_uid",
+      },
+      write_date: {
+        type: "date",
+        string: "write_date"
+      },
+      write_uid: {
+        type: "many2one",
+        refModel: "ResUser",
+        string: "write_uid"
+      },
     };
     this._init(this.fields);
-    this.allowFunc = ['search', 'update', 'create', 'createStockAndLocation', 'delete'];
-    this.permission_create = 'GROUP_KETOANVIEN';
-    this.permission_read = 'GROUP_KETOANVIEN';
-    this.permission_update = 'GROUP_KETOANVIEN';
-    this.permission_delete = 'GROUP_KETOANVIEN';
+    this.allowFunc = [
+      "search",
+      "update",
+      "create",
+      "createStockAndLocation",
+      "delete",
+    ];
+    this.permission_create = "GROUP_KETOANVIEN";
+    this.permission_read = "GROUP_KETOANVIEN";
+    this.permission_update = "GROUP_KETOANVIEN";
+    this.permission_delete = "GROUP_KETOANVIEN";
   }
 
   // ============================= createStockAndLocation ==============================
 
-  createStockAndLocation(payload = {}) {
-    return this._checkPermission(payload.username, this.permission_update) // check permisson
-      .then((permission) => {
-        let stockPayload = _.cloneDeep(payload);
-        return this.create(stockPayload);
-      })
-      .then((createRs) => {
-        if (createRs.status || createRs.message) {
-          throw { status: 400, message: "stock_warehouse - Error creating stock." }
-        } else {
-          let locationPayload = _.cloneDeep(payload);
-          let newLocationData = [{
-            display_name: "Kho",
-            name: `${createRs.ops[0].code}/Kho`,
-            stock_warehouse_id: createRs.ops[0]._id
-          }];
-          locationPayload.documents = newLocationData;
-          return locationPayload;
-        }
-      })
-      .then((locationPayload) => {
-        locationModel.getCollection();
-        return locationModel.create(locationPayload);
-      })
-      .catch((err) => {
-        let error = {
-          status: err.status ? err.status : 500,
-          message: err.message
-            ? JSON.stringify(err.message)
-            : JSON.stringify(err),
+  _postCreate(payload = {}, result = {}) {
+    let newPayload = _.cloneDeep(payload)
+    newPayload.documents = [{
+      display_name: "Kho",
+      name: `${payload.documents[0].code}/Kho`,
+      stock_warehouse_id: payload.documents[0]._id,
+    }, ];
+    locationModel.getCollection();
+    return locationModel.create(newPayload).then((newResult) => {
+      if (newResult.status || newResult.message) {
+        return { // is it throw or return?
+          status: newResult.data.status, // data?
+          message: `SW-PC ${newResult.data.message}`,
         };
-        logger.error(error);
-        return error;
-      });
+      } else {
+        return super._postCreate(payload, result) // Is it payload or newPayload?
+      }
+    });
   }
 
+  //   // return res
+  // }
 
-
-
-
-
-
-
-
-
-
+  // create(payload = {}) {
+  //   return this._checkPermission(payload.username, this.permission_update) // check permisson
+  //     .then((permission) => {
+  //       let stockPayload = _.cloneDeep(payload);
+  //       return this.create(stockPayload);
+  //     })
+  //     .then((createRs) => {
+  //       if (createRs.status || createRs.message) {
+  //         throw { status: 400, message: "stock_warehouse - Error creating stock." }
+  //       } else {
+  //         let locationPayload = _.cloneDeep(payload);
+  //         let newLocationData = [{
+  //           display_name: "Kho",
+  //           name: `${createRs.ops[0].code}/Kho`,
+  //           stock_warehouse_id: createRs.ops[0]._id
+  //         }];
+  //         locationPayload.documents = newLocationData;
+  //         return locationPayload;
+  //       }
+  //     })
+  //     .then((locationPayload) => {
+  //       locationModel.getCollection();
+  //       return locationModel.create(locationPayload);
+  //     })
+  //     .catch((err) => {
+  //       let error = {
+  //         status: err.status ? err.status : 500,
+  //         message: err.message
+  //           ? JSON.stringify(err.message)
+  //           : JSON.stringify(err),
+  //       };
+  //       logger.error(error);
+  //       return error;
+  //     });
+  // }
   // ============================= endCreateStockAndLocation ==============================
-
-
 }
 
 module.exports = new StockWarehouse();
\ No newline at end of file
